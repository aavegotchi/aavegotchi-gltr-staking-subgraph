type Account @entity {
  id: Bytes!
  asERC20: ERC20Contract
  ERC20balances: [ERC20Balance!]! @derivedFrom(field: "account")
  ERC20approvalsOwner: [ERC20Approval!]! @derivedFrom(field: "owner")
  ERC20approvalsSpender: [ERC20Approval!]! @derivedFrom(field: "spender")
  ERC20transferFromEvent: [ERC20Transfer!]! @derivedFrom(field: "from")
  ERC20transferToEvent: [ERC20Transfer!]! @derivedFrom(field: "to")
  events: [Event!]! @derivedFrom(field: "emitter")
}
type ERC20Contract @entity(immutable: true) {
  id: Bytes!
  asAccount: Account!
  name: String
  symbol: String
  decimals: Int!
  totalSupply: ERC20Balance!
  balances: [ERC20Balance!]! @derivedFrom(field: "contract")
  approvals: [ERC20Approval!]! @derivedFrom(field: "contract")
  transfers: [ERC20Transfer!]! @derivedFrom(field: "contract")
}
type ERC20Balance @entity {
  id: ID!
  contract: ERC20Contract!
  account: Account
  value: BigDecimal!
  valueExact: BigInt!
  transferFromEvent: [ERC20Transfer!]! @derivedFrom(field: "fromBalance")
  transferToEvent: [ERC20Transfer!]! @derivedFrom(field: "toBalance")
}
type ERC20Approval @entity {
  id: ID!
  contract: ERC20Contract!
  owner: Account!
  spender: Account!
  value: BigDecimal!
  valueExact: BigInt!
}
type ERC20Transfer implements Event @entity(immutable: true) {
  id: ID!
  emitter: Account!
  transaction: Transaction!
  timestamp: BigInt!
  contract: ERC20Contract!
  from: Account
  fromBalance: ERC20Balance
  to: Account
  toBalance: ERC20Balance
  value: BigDecimal!
  valueExact: BigInt!
}

type Deposit implements Event @entity(immutable: true) {
  id: ID!
  transaction: Transaction!
  emitter: Account!
  timestamp: BigInt!
  from: User!
  to: Pool!
  amount: BigInt!
}

type Withdraw implements Event @entity(immutable: true) {
  id: ID!
  transaction: Transaction!
  emitter: Account!
  timestamp: BigInt!
  from: Pool!
  to: User!
  amount: BigInt!
}

type Pool @entity {
  id: ID!
  balance: BigInt!
  positions: [PoolPosition!]! @derivedFrom(field: "pool")
  stats: PoolStat @derivedFrom(field: "pool")
}

type PoolPosition @entity {
  id: ID!
  user: User!
  pool: Pool!
  balance: BigInt!
}

type User @entity {
  id: Bytes!
  gltrHarvested: BigInt!
  positions: [PoolPosition!]! @derivedFrom(field: "user")
}

type EmergencyWithdraw implements Event @entity(immutable: true) {
  id: ID!
  transaction: Transaction!
  emitter: Account!
  timestamp: BigInt!

  from: Pool!
  to: User!
  amount: BigInt!
}

type Harvest implements Event @entity(immutable: true) {
  id: ID!
  transaction: Transaction!
  emitter: Account!
  timestamp: BigInt!
  to: User!
  amount: BigInt!
}

interface Event {
  id: ID!
  transaction: Transaction!
  emitter: Account!
  timestamp: BigInt!
}

type Transaction @entity(immutable: true) {
  id: ID!
  timestamp: BigInt!
  blockNumber: BigInt!
  events: [Event!]! @derivedFrom(field: "transaction")
}

type PoolStat @entity {
  id: ID!
  currentPositions: BigInt!
  totalPositions: BigInt!
  overallStats: Stat!
  pool: Pool!
}

type Stat @entity {
  id: ID!
  currentStakers: BigInt!
  totalStakers: BigInt!
  poolStats: [PoolStat!]! @derivedFrom(field: "overallStats")
}
